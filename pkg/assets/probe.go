// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ebpf/bin/probe.o

package assets


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataProbeO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5d\x4c\x1c\xd5\x17\x3f\xb3\x14\x76\x81\x52\x68\xe9\xb6\x74\x4b\x5b\xfe\xff\xd8\x04\x49\xa5\xd0\x52\x25\xb5\x51\xd2\x44\xe5\xa1\x2a\x51\x13\xf1\xa5\xd3\x65\x98\x76\x57\x60\x59\x67\x86\x16\xd8\x1a\xeb\x43\x13\xd2\x27\x1e\xfc\x20\x4d\xa3\xfd\x30\xa6\x0f\x9a\xf0\x60\x02\x6f\xcb\x43\x63\x78\x69\xc2\x83\x26\x24\x55\xc3\x43\x1f\x36\xf1\xc1\x6a\x9a\x88\x49\x65\xcc\xdc\x7b\x86\xb9\x73\x66\x2e\x6c\xab\x11\x4c\xf6\x3e\xf0\xdb\xf3\xbb\xf7\xdc\x73\xee\xb9\xe7\x9c\x9d\x59\x3e\x78\xe9\xd4\xcb\x11\x45\x01\x77\x28\xf0\x3b\x78\x92\x37\x26\x0e\x78\x9f\xbb\xf0\xef\x5e\x50\x20\xbf\x8b\x73\x97\x01\xa0\x1c\x00\x72\x55\xcb\xb6\x2b\x6f\x03\x80\x0b\x00\xd0\x04\x00\x5a\xd5\x43\xc6\xe7\x6f\xf2\xf5\xd1\x08\xc0\x43\xdb\xb6\x1b\x88\xb1\xcb\xcc\x07\x80\x38\x9c\x64\x72\x32\xca\x79\xba\x4e\x4b\x3c\x08\xec\xf7\x60\xcd\xfd\x3a\x99\x3c\xa3\x70\xf9\x5e\x5d\x8c\xef\x7f\x83\xef\x93\x4b\x2c\xf9\xfc\xce\x55\x15\x02\xfb\x2f\xd9\xb6\x9d\xbf\x85\x72\x19\xc0\xb2\x6d\xdb\x33\xb1\x70\xff\x66\xb6\x78\xf6\x23\x21\xf3\xe7\x14\x1e\x97\x0b\x88\x71\xe5\x29\xc6\xe7\xae\x2c\x30\xbb\x63\x37\x0a\xe8\xd7\x3c\x43\x6d\xfc\x07\xe4\xb9\x9f\x5a\x62\x91\xfb\x97\x44\xfb\x11\x62\xbf\xcc\x71\x92\xdb\xdf\xcb\xe2\xbf\xb0\x7a\x3e\xc7\xe5\x73\x78\x2f\xee\xfd\xe4\xbf\xc0\x73\x6d\x01\x98\x77\xce\x29\xd9\x37\x5f\x86\xfb\x97\x03\x34\xe0\x7e\x7b\x42\xf6\x8b\x43\xd5\x6a\xbc\xb9\xbf\x77\x02\xf1\xbc\xb3\xe6\x7d\x45\xc8\x7d\xa1\x5d\x5c\xf7\xb1\xb0\xde\xc9\xbb\x7c\x05\xfa\x1b\xf3\xef\xa7\x5d\x79\x14\xb0\xfb\x68\x0d\xbb\x79\xcc\xb7\x78\x74\x2b\xde\x47\x81\xe4\x45\x30\xef\x0a\x6b\x9e\x83\x07\x6c\x0c\xe7\x0f\x60\xbd\xdc\x3b\x17\x7e\x9e\xf5\xea\xc9\xf5\x2f\xff\x1e\x47\x37\x7f\xb4\x04\xaf\xaf\x99\xca\xf0\x38\xe4\x3f\xe4\x18\xcc\x3b\xbe\x61\xf1\x75\xd9\xcb\xe4\xa4\x6b\xe7\x6f\xd7\xe5\x6b\x3c\x0e\xa4\x2e\x73\xe3\x3c\xee\xb4\x3e\xd7\xad\x47\x49\xbf\x78\xfc\x7a\x7c\x1e\xfd\xe0\x75\x96\x1b\x97\xd4\xe5\xd5\x27\xa8\xcb\x0a\xb1\x2e\xbf\xb3\xd7\xbe\x1f\x9e\xd8\x9b\xb7\xce\x79\xc2\xce\x54\xf0\xfb\xd3\xde\x7d\xdc\x3a\xe7\x13\xf7\xce\xe0\xf9\x63\xb8\x3f\x62\x3c\xb6\x31\x7d\x64\xfd\x7a\xe3\x7d\x65\xfd\x3c\xc2\xfb\x2b\xb2\xff\xc4\x21\xce\xef\xa3\xd2\x3f\xaf\x5d\x5d\x0e\x9c\x7b\x79\xad\x3e\x86\xf5\x1f\x8f\x55\x33\xcc\x8d\x63\x1d\x5d\x0d\x7e\xaf\x3d\x51\xff\x4a\x85\xc7\xb1\xd4\xbf\x4a\xfd\xab\xd4\xbf\xfe\xfd\xfe\x95\xaf\xe7\x98\x6c\xe7\xf9\x37\x83\xf1\x18\x68\xe1\x7d\x4a\x6b\xe1\x75\x98\x6b\xc1\x7c\x6c\xc1\x3c\x68\x59\x42\xc4\x3c\x69\x59\x40\x9c\x47\x9c\x43\x9c\x45\x9c\x46\xbc\x8d\x78\x1d\x71\x0a\x71\x12\x71\x02\xf1\x12\xe2\x28\x62\x16\x31\x85\x78\x06\xb1\x17\xb1\x07\xb1\x1b\xb1\x0b\xb1\x13\xb1\x0d\xb1\x19\xb1\x09\xb1\x01\xb1\x0e\x31\x86\x08\x88\xcb\x2b\x78\x7e\xc4\x02\xe2\x12\xe2\x22\xe2\x02\xe2\x3c\xe2\x1c\xe2\x2c\xe2\x34\xe2\x6d\xc4\xeb\x0c\xdf\x56\x00\x6c\x1b\xa0\x16\xef\x21\xff\x25\xde\x6f\x05\xc0\xf5\x15\x2f\x4f\x9d\x7b\x39\xad\xf0\xfb\x7d\x26\xa4\x8e\xf3\x7d\xf4\xfe\x6b\xf8\xbd\xae\xe6\xcf\xb5\x15\x08\x7d\xbf\x9a\x5a\xa1\x79\x35\xb5\xe2\xef\x2f\xd7\x56\x82\x79\x46\xfb\x0a\xcd\x2b\xa7\x7a\x9d\x25\x75\xe8\x4f\x69\x78\xa3\x12\xe3\xc2\x2a\xae\x6e\xa3\xbd\xd9\x5c\x23\x82\x79\x13\xc3\xcf\xa5\xe1\x8d\x28\xc6\x66\xd9\xf9\x8e\x6a\xde\x68\x6f\x36\xd7\xd8\xb2\xd1\x0e\x6c\xe2\xe1\xf4\x1b\xe7\xbb\x83\xc5\xa8\x54\x54\xbe\x51\x89\xb9\xc3\x62\x53\xea\xc5\xbe\xf1\x4a\xcf\x29\x58\xb1\x6d\xf6\x1c\xe4\x86\x46\x19\x7f\x03\x62\x17\xab\x95\xad\xc0\x9f\x8f\x1b\x84\xf5\x97\x84\xdc\x6a\x04\x80\x0e\x61\x6e\x81\xec\xed\xcc\xbf\x25\xc8\xa3\x65\xc1\x79\x4b\x90\xbb\x95\xe0\xfc\x47\xeb\xe8\x7f\x23\xc8\xbd\x45\xe6\xfd\xb7\xac\x4e\x7e\xb5\x29\xff\x33\xb3\x5f\x06\x59\xb2\x4f\x94\xc9\xe5\x30\x47\xd6\x77\x30\x3e\x0a\x40\xfc\xda\x85\x7c\x8a\xf0\x80\xfc\x34\xa1\xef\x2b\x9c\xef\x26\x76\x0f\x32\xb9\x12\x26\xc9\xfa\xdf\x14\xce\x77\x92\x78\x1d\x62\xeb\xab\x03\xfe\x6c\x43\x9e\xfa\xf3\x87\xc2\x79\xea\xcf\x8f\xc8\x53\x7f\xf6\x33\xb9\x26\xc0\x03\x8b\x1a\x3d\xac\xcb\x97\x4b\xf8\xa8\x84\xaf\x94\xf0\xd5\x12\xbe\x26\xc0\x7d\x02\x00\xdb\xf1\xdd\x0d\x84\xef\x8d\x8b\x8c\xdf\x1d\xe0\xaf\x30\x7e\xe7\x2a\xdf\x88\x71\x7d\x91\xf1\xb5\x01\x5e\x91\xb4\x11\x43\x09\xe7\x7f\x01\x80\x1d\xc2\x79\xdd\x3c\xfe\x89\xf1\xde\x79\xdd\xfc\x7f\x95\xd9\xdd\x1e\xb0\x9b\x94\xec\x7f\x9a\xad\xdf\x11\x58\xdf\xce\xf8\xba\x00\x7f\x80\xf1\xf5\x01\x3e\xcb\xf8\x78\x80\x1f\x57\x1c\x3f\xbd\x38\xbb\x75\xf6\x35\xf3\xbf\x3a\x70\xae\x3c\xe3\xbd\x7c\x70\x7b\xc6\x5d\xc6\x7b\xf9\xe0\xf6\x8b\x2e\x44\xc7\xdc\xff\x01\x20\x25\xc8\x09\x80\xd5\xfc\x57\xb0\x17\xc5\x84\x7b\x70\xde\x6f\x9a\x05\x79\x3f\x00\x4c\x08\xb2\x73\xd6\x25\x41\xfe\x9f\x63\x2f\xe2\xc9\xfb\xc4\xbe\x87\xf6\x3a\x89\xbd\x09\xf0\xdb\xeb\x16\xe4\x3d\x64\xde\xf1\x7f\x9a\xec\xb7\x48\xf6\xeb\x26\xfe\xa7\x88\xff\x0b\xc4\xff\xa6\x88\x5f\x1e\x8d\xf8\xcf\xb3\x48\xce\xd3\x59\x46\x64\xe2\x6f\x96\xf8\x3b\x49\xfc\x9d\x25\xfe\x82\xf2\xdf\x3e\xff\xac\xb0\x9f\x53\xfd\xcd\x11\xbf\xbf\x8d\x82\x7f\xb5\x24\x5e\x4e\x6e\xf4\x0a\xb2\x53\x95\xa3\x82\xec\x54\xdd\x94\x20\xd7\x93\xf8\xb1\xae\x72\x36\x3d\x68\xe9\x86\x3a\x62\xea\x86\xda\x97\xce\x24\x8d\x31\x68\xb5\xf4\x51\x0b\x86\x92\x59\xf3\xb0\x65\x24\x35\x5d\xd5\xcf\xeb\x19\xcb\xe4\x8c\x69\x25\x0d\x4b\x75\x25\x6d\x78\x24\x63\xe9\x06\x4a\x83\xc3\xa6\xa5\x32\x15\x6f\xb1\x36\xe0\x63\xd8\xe7\x7e\x35\x9b\xee\x37\x41\x3d\xaf\x1b\x66\x7a\x38\xc3\x67\xb8\x71\x35\x9b\xb4\x52\xa0\x0e\xa6\x35\x3d\x63\xea\xd0\x6a\xe8\x83\xad\x7a\x4a\x3d\x6b\x24\x87\x74\x60\xca\xd9\xe1\x74\xc6\x52\x47\xd8\x67\x18\xc9\x1a\xc3\x7d\xfa\xaa\x64\xe8\x96\x8f\x18\x08\x10\x3e\xc9\xd9\xdd\xdb\xf3\xb0\xc0\xf2\x7d\x7d\x8c\xbb\x95\x48\x0e\x84\x92\x3e\xc6\xd4\x33\xfd\xaa\x10\x07\x38\x3b\x92\xd1\xd4\x74\xbf\x78\x18\x53\x4b\xe9\xfd\xf8\x37\x6b\x0c\x6b\xba\x69\xaa\xfa\xa8\xae\x51\x07\xd9\x8a\xc3\x21\xeb\x86\x92\xe9\x4c\xab\x06\xad\xa6\x65\x58\xc9\x3e\x68\x35\xc7\x86\x1c\x3c\x75\xf2\x64\x87\xfa\x9c\x03\x47\x38\xb4\xa9\xcf\x3a\x70\x54\x3d\xc6\xe7\x8e\xf2\x39\x06\xed\x1c\x3a\xd4\x76\x64\x39\x1e\x53\x8f\x70\x95\x23\x38\xdb\x86\xb3\x6d\xf0\x4f\x8c\xbb\x4a\xe0\x91\x80\x8d\xee\x7d\x1c\x4f\x90\xef\x73\xfa\x5b\xce\x4e\xe4\x2a\x08\xdf\x25\xb1\x47\xdf\xd3\x76\x2b\x6b\xeb\x5f\x22\xf6\xc9\xcf\xfb\x50\xaf\x40\xe8\x53\x41\x2a\x81\xfa\x28\x27\x80\x9f\xd3\xd5\x77\xfb\xfa\xd3\x12\xfb\x73\x68\x97\x3e\xb7\x52\xfb\x07\x25\xf6\x0b\x68\xbf\x4d\xb0\x5f\x1e\x62\xff\x4d\x89\xfd\x49\xbc\x14\xfa\x5c\x4b\xed\xbf\x2e\xb1\xdf\xb0\x97\xe3\xb4\x60\x3f\x1a\x62\xff\x05\x89\xfd\x18\x3e\x92\xd0\xe7\x6e\x6a\xff\xb8\xc4\xfe\x3c\xda\xef\x11\xec\x57\x86\xd8\x57\x24\xf6\x7b\x70\xe1\x7a\xe7\xff\x13\x24\xe7\xc7\xc6\x2d\x9e\xbf\x3a\xc4\xfe\x4d\x89\xfd\x79\x7c\x74\xa1\xef\x0d\xd4\xfe\x67\xb2\xf3\xa3\xfd\x26\xc1\x7e\x4d\x88\xfd\xe3\x58\x3f\xb4\x06\x9b\xb6\x71\x6c\x24\xf1\xa7\xf5\x73\x48\xa2\x7f\xa2\xb6\x38\xfd\x6e\x89\x7e\x6f\x5d\x71\xfa\xef\x48\xf4\xad\xed\xc5\xe9\x27\x24\xfa\x93\x3b\x8a\xd3\xbf\x2c\xd1\xff\xaa\xbe\x38\xfd\x01\x89\xfe\xfc\xce\xe2\xf4\x3f\x95\xe8\xdf\x8f\x87\xaf\xa7\xfd\xf3\x7d\x89\x7e\x41\xa2\x4f\xe5\x5b\xa8\x4f\x5f\xbb\x1e\xa0\xfe\x7a\xfd\xeb\x73\x49\xfd\x14\x30\x7f\xf1\xdf\x53\xec\x9e\x1a\x42\xf2\xf7\x7b\x25\xfc\x27\xa5\x39\x7c\xc5\xba\x2d\x3c\x6f\xc5\x05\x7d\xf7\x77\x83\xbf\x02\x00\x00\xff\xff\xad\x6d\x95\x70\x48\x26\x00\x00")

func bindataProbeOBytes() ([]byte, error) {
	return bindataRead(
		_bindataProbeO,
		"/probe.o",
	)
}



func bindataProbeO() (*asset, error) {
	bytes, err := bindataProbeOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "/probe.o",
		size: 9800,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1642029088, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"/probe.o": bindataProbeO,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"": {Func: nil, Children: map[string]*bintree{
		"probe.o": {Func: bindataProbeO, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
